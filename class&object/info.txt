*** The Difference between Objects & Data Structures / Container
  - Objects
    - Private internals / properties, public API (methods)
    - Contain your business login (in OOP)
    - Abstractions over concretions
  
  - Data Structures / Container
    - Public internals / properties, (almost) no API (methods)
    - Store and transport data
    - Concretions only
 
- POLYMORPHISM - The ability of an object to take on many forms
  - It is simply an object or a method, which always has the same structure and the same name, but which then does different things

- Classes
  - Should be small
    - Classes should have a single responsibility (Single-Responsibility Principle --> SRP)

  - Cohesion
    - how well the methods of a class are using the class properties
      - Maximum Cohesion -- GOAL (HIGHLY COHESIVE CLASSES)
        - All methods each use all properties
        - A highly cohesion object
      - No Cohesion -- AVOID
        - All methods don't use the class properties
        - Data structure / container with utility methods

  - Law of Demeter
    - this.customer.lastPurchase.date --> AVOID
    - Principle of Least Knowledge: Don't depend on the internals of "strangers" (other objects which you don't directly know)