Method is just a function inside object

- Calling the function should be readable
  - The number and order of arguments matters

- Working with the function should be easy / readable
  - The length of the function body matters

*** Minimize the number of parameters
  - None - best possible option - not always possible
  - 1 - very good possible option
  - 2 - use with caution
  - 3 - avoid if possible
  - >3 - always avoid

*** Functions Should be small
  - Functions Should Do Exactly One Thing
    - Different Operations
      - Validate + Save User Input
    - Different Levels of Abstraction
      - High Level
        - function which has a descriptive name and then does something
        - isEmail()
      - Low Level
        - low level API method / operation
        - includes()
    
    - Try not to mix multiple levels of abstraction in one of the same function

  - Rule of Thumb
    - Extract code that works on the same functionality
      - user.setAge(31)...user.setName('Max')
      - user.update({age: 31, name: 'Max'})
    - Extract code that requires more interpretation than the surrounding code
      - if(!email.includes('@')){...} ... saveNewUser(email) -- mix levels
      - if(!isValid(email)){...} ... saveNewUser(email) -- same level

  - DRY - DON'T REPEAT YOURSELF
  - code duplication and repeating yourself
    - same task / logic - not always the same code

  - Split Functions Reasonably
    - Don't split if 
      - you're just renaming the operation
      - finding the new function will take longer than reading the extracted code
      - can't produce a reasonable name for the extracted function

  - Try Keeping Functions Pure
    - The same input always yields the same output
      - predictable
    - no side effects
      - an operation which does not just act on function inputs and change the function output but which instead changes the overall system / program state
      - are not automatically bad - we do need them in our program
      - Unexpected side affects should be avoided